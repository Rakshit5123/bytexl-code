#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> myMap;

        for (int i = 0; i < nums.size(); i++) {
            int comp = target - nums[i];
            if (myMap.find(comp) != myMap.end()) {
                int idx1 = myMap[comp];
                int idx2 = i;
                if (idx1 > idx2) swap(idx1, idx2);  // ensure increasing order
                return {idx1, idx2};
            }
            myMap[nums[i]] = i;
        }

        return {}; // Should not happen per constraints
    }
};

int main() {
    int n;
    cin >> n;

    vector<int> nums(n);
    for (int i = 0; i < n; ++i)
        cin >> nums[i];

    int target;
    cin >> target;

    Solution obj;
    vector<int> result = obj.twoSum(nums, target);

    cout << result[0] << " " << result[1] << endl;

    return 0;
}
